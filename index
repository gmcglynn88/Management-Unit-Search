<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8" />
  <title>Genesys Cloud Management Unit Lookup</title>
  <style>
    /* Optional basic styling */
    body {
      font-family: Arial, sans-serif;
      margin: 20px;
    }
    label, select, button {
      display: block;
      margin: 10px 0;
    }
    #results {
      margin-top: 20px;
      font-weight: bold;
    }
  </style>
</head>
<body>

<h1>Genesys Cloud Management Unit Lookup</h1>

<!-- Dropdown to select an agent -->
<label for="agentsSelect">Select an Agent:</label>
<select id="agentsSelect"></select>

<button id="submitBtn">Get Management Unit</button>

<div id="results"></div>

<script>
  // 1) Fetch the list of agents and populate dropdown
  async function getAgents() {
    try {
      const response = await fetch("https://api.mypurecloud.com/api/v2/users?limit=100", {
        method: "GET",
        headers: {
          "Authorization": "Bearer YOUR_ACCESS_TOKEN",  // Replace with valid token
          "Content-Type": "application/json"
        }
      });

      if (!response.ok) {
        throw new Error(`Error fetching users: HTTP ${response.status}`);
      }

      const data = await response.json();

      // data.entities typically contains the list of users in Genesys Cloud
      return data.entities;
    } catch (error) {
      console.error(error);
      alert("Failed to fetch agent list. Check console for more details.");
      return [];
    }
  }

  // 2) Fetch an Agent's Management Unit ID
  async function getAgentManagementUnitId(agentId) {
    try {
      const response = await fetch(`https://api.mypurecloud.com/api/v2/workforcemanagement/agents/${agentId}/managementunit`, {
        method: "GET",
        headers: {
          "Authorization": "Bearer YOUR_ACCESS_TOKEN",  // Replace with valid token
          "Content-Type": "application/json"
        }
      });

      if (!response.ok) {
        // The user might not have an assigned MU, handle the error or check the status
        throw new Error(`Error fetching agent's MU: HTTP ${response.status}`);
      }

      const data = await response.json();
      // data should contain { managementUnit: { id: 'xxxxx' } } or a similar structure
      return data.managementUnit && data.managementUnit.id ? data.managementUnit.id : null;
    } catch (error) {
      console.error(error);
      alert("Failed to fetch agent management unit. Check console for more details.");
      return null;
    }
  }

  // 3) Fetch the Management Unit name by ID
  //    Option A: fetch ALL management units, filter for the ID
  //    Option B: directly call /managementunits/{muId} if you prefer to fetch a single MU
  async function getManagementUnitNameById(managementUnitId) {
    try {
      // Example: get a single Management Unit
      // const response = await fetch(`https://api.mypurecloud.com/api/v2/workforcemanagement/managementunits/${managementUnitId}`, { ... });
      
      // Or, fetch list of all management units & find the one that matches
      const response = await fetch(`https://api.mypurecloud.com/api/v2/workforcemanagement/managementunits?expand=businessUnit`, {
        method: "GET",
        headers: {
          "Authorization": "Bearer YOUR_ACCESS_TOKEN", // Replace with valid token
          "Content-Type": "application/json"
        }
      });

      if (!response.ok) {
        throw new Error(`Error fetching management units: HTTP ${response.status}`);
      }

      const data = await response.json();
      // data.entities should contain an array of management units
      const managementUnits = data.entities || [];
      
      const mu = managementUnits.find(mu => mu.id === managementUnitId);
      return mu ? mu.name : "(Not Found)";
    } catch (error) {
      console.error(error);
      alert("Failed to fetch management unit name. Check console for details.");
      return "(Unknown)";
    }
  }

  // Populate the dropdown on page load
  document.addEventListener("DOMContentLoaded", async () => {
    const agentsSelect = document.getElementById("agentsSelect");
    const submitBtn = document.getElementById("submitBtn");
    const resultsDiv = document.getElementById("results");

    // Get the agents
    const agents = await getAgents();
    // Clear the select
    agentsSelect.innerHTML = "";

    if (agents && agents.length > 0) {
      // Populate the dropdown with user ID as value, user name as label
      agents.forEach(agent => {
        const option = document.createElement("option");
        option.value = agent.id;
        option.text = agent.name || agent.username || "Unknown";
        agentsSelect.appendChild(option);
      });
    } else {
      const option = document.createElement("option");
      option.value = "";
      option.text = "No agents found";
      agentsSelect.appendChild(option);
    }

    // On button click, get the MU for the selected user
    submitBtn.addEventListener("click", async () => {
      resultsDiv.textContent = "Retrieving Management Unit...";
      const selectedAgentId = agentsSelect.value;
      if (!selectedAgentId) {
        alert("No agent selected.");
        return;
      }

      const muId = await getAgentManagementUnitId(selectedAgentId);
      if (!muId) {
        resultsDiv.textContent = "This user might not have an assigned management unit.";
        return;
      }

      const muName = await getManagementUnitNameById(muId);
      resultsDiv.textContent = `Management Unit for selected Agent: ${muName}`;
    });
  });
</script>
</body>
</html>
